<idea-plugin version="2">
  <id>org.elixir_lang</id>
  <name>Elixir</name>
  <vendor email="Kronic.Deth@gmail.com">Luke Imhoff</vendor>

  <!-- please see http://confluence.jetbrains.com/display/IDEADEV/Build+Number+Ranges for description -->
  <!-- 141 == IntelliJ IDEA 14.1, which is the oldest version compatible with GrammarKit 1.3.0 -->
  <idea-version since-build="141"/>

  <!-- please see http://confluence.jetbrains.com/display/IDEADEV/Plugin+Compatibility+with+IntelliJ+Platform+Products
       on how to target different products -->
  <depends>com.intellij.modules.lang</depends>
  <depends config-file="intellij-erlang-plugin.xml" optional="true">org.jetbrains.erlang</depends>
  <depends config-file="rich-platform-plugin.xml" optional="true">com.intellij.modules.java</depends>

  <extensions defaultExtensionNs="com.intellij">
    <errorHandler implementation="org.elixir_lang.errorreport.Submitter"/>

    <!-- Elixir Module Structure -->
    <sdkType implementation="org.elixir_lang.sdk.elixir.Type"/>
    <sdkType implementation="org.elixir_lang.sdk.erlang.Type"/>

    <moduleConfigurationEditorProvider implementation="org.elixir_lang.module.DefaultModuleEditorsProvider" order="first"/>

    <editorNotificationProvider implementation="org.elixir_lang.inspection.SetupSDKNotificationProvider"/>

    <!-- EEX -->
    <!--<braceMatcher filetype="EEx" implementationClass="org.elixir_lang.eex.BraceMatcher"/>-->
    <fileType.fileViewProviderFactory filetype="EEx" implementationClass="org.elixir_lang.eex.file.view_provider.Factory"/>
    <fileTypeFactory implementation="org.elixir_lang.eex.file.type.Factory"/>
    <lang.fileViewProviderFactory language="EEx" implementationClass="org.elixir_lang.eex.file.view_provider.Factory"/>
    <lang.parserDefinition language="EEx" implementationClass="org.elixir_lang.eex.ParserDefinition"/>
    <!--<lang.psiStructureViewFactory language="EEx" implementationClass="org.elixir_lang.eex.PsiStructureViewFactory"/>-->

    <!-- Mix related extensions -->
    <projectConfigurable instance="org.elixir_lang.settings.ElixirExternalToolsConfigurable" />
    <projectService serviceImplementation="org.elixir_lang.mix.settings.MixSettings" />
    <programRunner implementation="org.elixir_lang.mix.runner.MixRunner" />
    <configurationType implementation="org.elixir_lang.mix.runner.MixRunConfigurationType" />

    <!-- Tesing -->
    <configurationType implementation="org.elixir_lang.mix.runner.exunit.MixExUnitRunConfigurationType" />
    <programRunner implementation="org.elixir_lang.mix.runner.exunit.MixExUnitRunner" />
    <runConfigurationProducer implementation="org.elixir_lang.mix.runner.exunit.MixExUnitRunConfigurationProducer" />
    <testFinder implementation="org.elixir_lang.mix.TestFinder"/>

    <colorSettingsPage implementation="org.elixir_lang.ElixirColorSettingsPage"/>
    <fileTypeFactory implementation="org.elixir_lang.ElixirFileTypeFactory"/>

    <!-- for template -->
    <internalFileTemplate name="Elixir Module"/>
    <internalFileTemplate name="Elixir Application"/>
    <internalFileTemplate name="Elixir Supervisor"/>
    <internalFileTemplate name="Elixir GenServer"/>
    <internalFileTemplate name="Elixir GenEvent"/>

    <!-- for liveTemplates -->
    <defaultLiveTemplatesProvider implementation="org.elixir_lang.templates.ElixirLiveTemplateProvider"/>
    <liveTemplateContext implementation="org.elixir_lang.templates.ElixirContextType"/>
    <!-- end liveTemplates -->

    <additionalTextAttributes file="colorSchemes/ElixirDarcula.xml" scheme="Darcula"/>
    <additionalTextAttributes file="colorSchemes/ElixirDefault.xml" scheme="Default"/>

    <annotator implementationClass="org.elixir_lang.annotator.Alias" language="Elixir"/>
    <annotator implementationClass="org.elixir_lang.annotator.Atom" language="Elixir"/>
    <annotator implementationClass="org.elixir_lang.annotator.Callable" language="Elixir"/>
    <annotator implementationClass="org.elixir_lang.annotator.EscapeSequence" language="Elixir"/>
    <annotator implementationClass="org.elixir_lang.annotator.Map" language="Elixir"/>
    <annotator implementationClass="org.elixir_lang.annotator.ModuleAttribute" language="Elixir"/>
    <externalAnnotator implementationClass="org.elixir_lang.annotator.Credo" language="Elixir"/>

    <!-- <code>.beam</code> -->
    <filetype.decompiler filetype="BEAM" implementationClass="org.elixir_lang.beam.Decompiler"/>
    <fileType.fileViewProviderFactory filetype="BEAM" implementationClass="org.elixir_lang.beam.FileViewProviderFactory"/>
    <filetype.stubBuilder filetype="BEAM" implementationClass="org.elixir_lang.beam.StubBuilder"/>
    <fileTypeFactory implementation="org.elixir_lang.beam.FileTypeFactory"/>
    <structureViewBuilder key="BEAM" factoryClass="org.elixir_lang.beam.StructureViewBuilderProvider"/>
    <stubElementTypeHolder class="org.elixir_lang.beam.psi.stubs.ModuleStubElementTypes"/>
    <syntaxHighlighter key="BEAM" factoryClass="org.elixir_lang.ElixirSyntaxHighlighterFactory"/>

    <completion.contributor implementationClass="org.elixir_lang.code_insight.completion.contributor.CallDefinitionClause" language="Elixir"/>

    <codeInsight.lineMarkerProvider implementationClass="org.elixir_lang.code_insight.line_marker_provider.CallDefinition" language="Elixir"/>
    <elementDescriptionProvider implementation="org.elixir_lang.psi.ElementDescriptionProvider"/>
    <gotoSymbolContributor implementation="org.elixir_lang.navigation.GotoSymbolContributor"/>
    <lang.braceMatcher language="Elixir" implementationClass="org.elixir_lang.code_insight.highlighting.brace_matcher.NonTrivial"/>
    <lang.commenter language="Elixir" implementationClass="org.elixir_lang.ElixirCommenter"/>
    <lang.findUsagesProvider language="Elixir" implementationClass="org.elixir_lang.FindUsagesProvider"/>

    <!-- folding -->
    <applicationService serviceInterface="org.elixir_lang.folding.ElixirFoldingSettings"
                        serviceImplementation="org.elixir_lang.folding.ElixirFoldingSettings"/>
    <codeFoldingOptionsProvider instance="org.elixir_lang.folding.OptionsProvider"/>
    <lang.foldingBuilder language="Elixir" implementationClass="org.elixir_lang.folding.Builder"/>

    <!-- formatting -->
    <codeStyleSettingsProvider implementation="org.elixir_lang.formatter.settings.CodeStyleSettingsProvider"/>
    <lang.formatter language="Elixir" implementationClass="org.elixir_lang.formatting.ModelBuilder"/>
    <langCodeStyleSettingsProvider implementation="org.elixir_lang.formatter.settings.LanguageCodeStyleSettingsProvider"/>

    <lang.parserDefinition language="Elixir" implementationClass="org.elixir_lang.ElixirParserDefinition"/>
    <lang.psiStructureViewFactory language="Elixir" implementationClass="org.elixir_lang.structure_view.Factory"/>
    <lang.quoteHandler language="Elixir" implementationClass="org.elixir_lang.QuoteHandler"/>
    <lang.syntaxHighlighterFactory key="Elixir" implementationClass="org.elixir_lang.ElixirSyntaxHighlighterFactory"/>
    <localInspection displayName="Ambiguous nested calls" enabledByDefault="true" groupName="Elixir"
                     implementationClass="org.elixir_lang.inspection.NoParenthesesManyStrict" language="Elixir"
                     level="ERROR" shortName="NoParenthesesManyStrict"/>
    <localInspection displayName="Ambiguous parentheses" enabledByDefault="true" groupName="Elixir"
                     implementationClass="org.elixir_lang.inspection.NoParenthesesStrict" language="Elixir"
                     level="ERROR" shortName="NoParenthesesStrict"/>
    <localInspection displayName="Keywords Not At End" enabledByDefault="true"
                     groupName="Elixir" implementationClass="org.elixir_lang.inspection.KeywordsNotAtEnd"
                     language="Elixir" level="ERROR" shortName="KeywordsNotAtEnd"/>
    <localInspection displayName="Keyword pair colon (:) used in type spec instead of type operator (::)"
                     enabledByDefault="true" groupName="Elixir"
                     implementationClass="org.elixir_lang.inspection.KeywordPairColonInsteadOfTypeOperator"
                     language="Elixir" level="ERROR" shortName="KeywordPairColonInsteadOfTypeOperator"/>
    <localInspection displayName="Match operator (=) used in type spec instead of type operator (::)"
                     enabledByDefault="true" groupName="Elixir"
                     implementationClass="org.elixir_lang.inspection.MatchOperatorInsteadOfTypeOperator"
                     language="Elixir" level="ERROR" shortName="MatchOperatorInsteadOfTypeOperator"/>

    <!-- module attribute refactoring -->
    <renameHandler implementation="org.elixir_lang.refactoring.module_attribute.rename.Handler"/>
    <renameInputValidator implementation="org.elixir_lang.refactoring.module_attribute.rename.InputValidator"/>
    <renamePsiElementProcessor implementation="org.elixir_lang.refactoring.module_attribute.rename.Processor"/>

    <!-- variable refactoring -->
    <renameHandler implementation="org.elixir_lang.refactoring.variable.rename.Handler"/>
    <renameInputValidator implementation="org.elixir_lang.refactoring.variable.rename.InputValidator"/>
    <renamePsiElementProcessor implementation="org.elixir_lang.refactoring.variable.rename.Processor"/>

    <stubIndex implementation="org.elixir_lang.psi.stub.index.AllName"/>
    <typedHandler implementation="org.elixir_lang.TypedHandler"/>

    <!-- debug -->
    <programRunner implementation="org.elixir_lang.debugger.xdebug.ElixirDebugRunner"/>
    <xdebugger.breakpointType implementation="org.elixir_lang.debugger.xdebug.ElixirLineBreakpointType"/>

  </extensions>

  <application-components>
    <!-- Add your application components here -->
  </application-components>

  <actions>
    <group id="LangElixir.NewActions">
      <separator/>
      <action id="Elixir.NewFile" class="org.elixir_lang.action.CreateElixirModuleAction"
              text="Elixir File" description="Create new Elixir Module">
      </action>
      <separator/>

      <!--suppress PluginXmlValidity -->
      <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewXml" />
    </group>
  </actions>

</idea-plugin>
